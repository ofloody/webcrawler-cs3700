#!/usr/bin/env python3

# from bs4 import BeautifulSoup
from html.parser import HTMLParser
import os
import socket
import ssl
import sys
import html

PORT = 443
HOST = "fakebook.3700.network"
USER_NAME = sys.argv[1]
PASSWORD = sys.argv[2]
CSRF_MIDDLEWARE_TOKEN = ''
CSRF_COOKIE = ''
SESSION_ID = ''

# Function will produce a tls socket given the standard connected socket and hostname


def tls_socket(host, socket):

    context = ssl.create_default_context()
    tsl_socket = context.wrap_socket(socket, server_hostname=host)

    return tsl_socket


def recieve(s):
    msg = ""
    data = "notnull"
    while "\r\n" not in msg and not data == "":
        data = s.recv(8192).decode("utf8")
        msg += data
    return msg


def get_page(s, page):
    global HOST
    global CSRF_COOKIE
    global SESSION_ID

    msg = (f"""
    GET {page} HTTP/1.1
    Host: {HOST}
    Connection: keep-alive
    Cookie: csrftoken={CSRF_COOKIE}; sessionid={SESSION_ID}
    """)

    s.sendall(msg.encode())
    response = recieve(s)
    return response


def get_cookies_from_header(html):
	global CSRF_COOKIE
	global SESSION_ID

    split_html = html.split("\n")
    for line in split_html:
        if (len(line) > 11 and line[0:11] == 'Set-Cookie:'):
            cookie_pair = line.split(';')[0].split('=')
			if(cookie_pair[0].splitt(' ') == 'sessionid'):
				SESSION_ID = cookie_pair[1]
			elif(cookie_pair[0].splitt(' ') == 'csrftoken'):
				CSRF_COOKIE = cookie_pair[1]


class MyHTMLTokenParser(HTMLParser):

    def handle_starttag(self, tag, attrs):
        global CSRF_MIDDLEWARE_TOKEN

        for i in range(len(attrs)):
            if(attrs[i][1] == 'csrfmiddlewaretoken'):
                CSRF_MIDDLEWARE_TOKEN = attrs[i+1][1]


token_parser = MyHTMLTokenParser()


s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((HOST, PORT))
s = tls_socket(HOST, s)

s.sendall(("GET /accounts/login/ HTTP/1.1\r\nHost:" +
          HOST + "\r\n\r\n").encode())
initial_get_result = recieve(s)
token_parser.feed(initial_get_result)
CSRF_COOKIE = get_cookie_from_header(initial_get_result)

data = "username=" + USER_NAME + "&password=" + PASSWORD + \
    "&csrfmiddlewaretoken=" + CSRF_MIDDLEWARE_TOKEN + "&next=/fakebook/" + "\n\n"
header = (f"""
POST /accounts/login/ HTTP/1.1
Host: {HOST}
Origin: https://fakebook.3700.network
Referer: https://fakebook.3700.network/accounts/login/?next=/fakebook/
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Connection: keep-alive
Content-Type: application/x-www-form-urlencoded
Cookie: csrftoken={CSRF_COOKIE}
""")
contentLength = "Content-Length: " + str(len(data)) + "\n\n"
LOGIN_MSG = header + contentLength + data

s.sendall(LOGIN_MSG.encode())
print(recieve(s))

# secret_flags = []
# visited_pages = []
# pages_to_visit = []

# while len(secret_flags) < 5:
# pop pages to visit
# if it"s in visited pages skip to next loop
# else add to visited pages
# fetch html
# walk throug html
# if it"s a secret flag print it and add to secret flags
# if it"s a link add to pages to visit
# else don"t care keep ggoing

# socket.sendall(LOGIN_REQUEST.encode())
# print(socket.recv(65535).decode())
