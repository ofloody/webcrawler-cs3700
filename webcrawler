#!/usr/bin/env python3

from html.parser import HTMLParser
import socket
import ssl
import sys
import html

PORT = 443
HOST = "fakebook.3700.network"
USER_NAME = sys.argv[1]
PASSWORD = sys.argv[2]
CSRF_MIDDLEWARE_TOKEN = ''
CSRF_COOKIE = ''
SESSION_ID = ''


def tls_socket(host, socket):
    # Function will produce a tls socket given the standard connected socket and hostname

    context = ssl.create_default_context()
    tsl_socket = context.wrap_socket(socket, server_hostname=host)

    return tsl_socket


def open_socket():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((HOST, PORT))
    s = tls_socket(HOST, s)
    return s


def recieve(s):
    msg = ""
    data = "notnull"
    while "\r\n" not in msg and not data == "":
        data = s.recv(8192).decode("utf8")
        msg += data
    return msg


def get_page(s, page):
    global HOST
    global CSRF_COOKIE
    global SESSION_ID

    msg = (f"""
GET {page} HTTP/1.1
Host: {HOST}
Connection: keep-alive
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36
Cookie: csrftoken={CSRF_COOKIE}; sessionid={SESSION_ID}\n
""")

    while(True):
        try:
            s.sendall(msg.encode())
            break
        except (RuntimeError, ValueError):
            s = open_socket()

    response = recieve(s)
    return response


def get_cookies_from_header(response_html):
    global CSRF_COOKIE
    global SESSION_ID

    split_html = response_html.split("\n")
    for line in split_html:
        if (len(line) > 11 and line[0:11] == 'Set-Cookie:'):
            cookie_pair = line.split(';')[0].split('=')
            if(cookie_pair[0].split(' ')[1] == 'sessionid'):
                SESSION_ID = cookie_pair[1]
            elif(cookie_pair[0].split(' ')[1] == 'csrftoken'):
                CSRF_COOKIE = cookie_pair[1]
        elif(len(line) == 0):
            return


def get_location_from_header(response_html):
    split_html = response_html.split("\n")
    for line in split_html:
        if (len(line) > 9 and line[0:9] == 'Location:'):
            return line.split(' ')[1]


def find_attr(attrs, attr_name):
    for i in range(len(attrs)):
        if(attrs[i][0] == attr_name):
            return attrs[i]
    return None


def get_status_code(response_html):
    try:
        split_html = response_html.split("\n")
        response_line = split_html[0]
        return response_line.split(' ')[1]
    except (IndexError):
        return None


def send_until_succeess(s, msg):
    response = ''
    status_code = ''
    while status_code != '200' and status_code != '302':
        s.sendall(msg.encode())
        response = recieve(s)
        status_code = get_status_code(response)

    return response


class HTMLTokenParser(HTMLParser):

    def handle_starttag(self, tag, attrs):
        global CSRF_MIDDLEWARE_TOKEN

        for i in range(len(attrs)):
            if(attrs[i][1] == 'csrfmiddlewaretoken'):
                CSRF_MIDDLEWARE_TOKEN = attrs[i+1][1]


token_parser = HTMLTokenParser()

s = open_socket()

INIT_GET_MSG = "GET /accounts/login/ HTTP/1.1\r\nHost:" + HOST + "\r\n\r\n"
initial_get_result = send_until_succeess(s, INIT_GET_MSG)
token_parser.feed(initial_get_result)
get_cookies_from_header(initial_get_result)

data = "username=" + USER_NAME + "&password=" + PASSWORD + \
    "&csrfmiddlewaretoken=" + CSRF_MIDDLEWARE_TOKEN + "&next=/fakebook/" + "\n\n"
header = (f"""
POST /accounts/login/ HTTP/1.1
Host: {HOST}
Origin: https://fakebook.3700.network
Referer: https://fakebook.3700.network/accounts/login/?next=/fakebook/
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Connection: keep-alive
Content-Type: application/x-www-form-urlencoded
Cookie: csrftoken={CSRF_COOKIE}
""")
contentLength = "Content-Length: " + str(len(data)) + "\n\n"
LOGIN_MSG = header + contentLength + data

login_response = send_until_succeess(s, LOGIN_MSG)

get_cookies_from_header(login_response)
redirected_page = "/fakebook/"


secret_flags = []
visited_pages = ["/accounts/logout/", "/"]
pages_to_visit = [redirected_page]
CATCH_SECRET = False


class HTMLMainParser(HTMLParser):
    def handle_starttag(self, tag, attrs):
        global pages_to_visit
        global visited_pages
        global CATCH_SECRET

        if tag == 'h2':
            h2_class = find_attr(attrs, "class")
            if h2_class and h2_class[1] == 'secret_flag':
                CATCH_SECRET = True

        elif tag == 'a':
            href = find_attr(attrs, "href")
            if href and (href[1] not in visited_pages) and (href[1] not in pages_to_visit) and href[1].startswith("/fakebook/"):
                pages_to_visit.append(href[1])

    def handle_data(self, data):
        global secret_flags
        global CATCH_SECRET

        if CATCH_SECRET:
            secret_flags.append(data)
            CATCH_SECRET = False


main_parser = HTMLMainParser()

while len(secret_flags) < 5 and len(pages_to_visit) > 0:
    curr_page = pages_to_visit.pop(0)

    while(True):
        try:
            curr_page_html = get_page(s, curr_page)
            break
        except (RuntimeError, ValueError, ssl.SSLZeroReturnError):
            s = open_socket()

    status_code = get_status_code(curr_page_html)
    if status_code == '500':
        pages_to_visit.append(curr_page)
    elif status_code == '302':
        visited_pages.append(curr_page)
        pages_to_visit.append(get_location_from_header(curr_page_html))
    elif status_code == '200':
        visited_pages.append(curr_page)
        get_cookies_from_header(curr_page_html)
        main_parser.feed(curr_page_html)

for flag in secret_flags:
    print(flag)


s.close()
