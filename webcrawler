#!/usr/bin/env python3

from bs4 import BeautifulSoup
from html.parser import HTMLParser
import os
import socket
import ssl
import sys
import html

PORT = 443
HOST = "fakebook.3700.network"
USER_NAME = sys.argv[1]
PASSWORD = sys.argv[2]
CSRF_MIDDLEWARE_TOKEN = ''
CSRF_COOKIE = ''
SESSION_ID = ''

# Function will produce a tls socket given the standard connected socket and hostname


def tls_socket(host, socket):

    context = ssl.create_default_context()
    tsl_socket = context.wrap_socket(socket, server_hostname=host)

    return tsl_socket

def open_socket():
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.connect((HOST, PORT))
	s = tls_socket(HOST, s)
	return s

def recieve(s):
    msg = ""
    data = "notnull"
    while "\r\n" not in msg and not data == "":
        data = s.recv(8192).decode("utf8")
        msg += data
    return msg


def get_page(s, page):
    global HOST
    global CSRF_COOKIE
    global SESSION_ID

    msg = (f"""
GET {page} HTTP/1.1
Host: {HOST}
Connection: keep-alive
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36
Cookie: csrftoken={CSRF_COOKIE}; sessionid={SESSION_ID}\n
""")

    #print(msg)
    while(True):
    	try:
    		s.sendall(msg.encode())
    		break
    	except (RuntimeError, ValueError):
    		s = open_socket()

    response = recieve(s)
    return response


def get_cookies_from_header(html):
    global CSRF_COOKIE
    global SESSION_ID

    split_html = html.split("\n")
    for line in split_html:
        if (len(line) > 11 and line[0:11] == 'Set-Cookie:'):
            cookie_pair = line.split(';')[0].split('=')
            if(cookie_pair[0].split(' ')[1] == 'sessionid'):
                SESSION_ID = cookie_pair[1]
            elif(cookie_pair[0].split(' ')[1] == 'csrftoken'):
                CSRF_COOKIE = cookie_pair[1]



class MyHTMLTokenParser(HTMLParser):

    def handle_starttag(self, tag, attrs):
        global CSRF_MIDDLEWARE_TOKEN

        for i in range(len(attrs)):
            if(attrs[i][1] == 'csrfmiddlewaretoken'):
                CSRF_MIDDLEWARE_TOKEN = attrs[i+1][1]


token_parser = MyHTMLTokenParser()



s = open_socket();

s.sendall(("GET /accounts/login/ HTTP/1.1\r\nHost:" +
          HOST + "\r\n\r\n").encode())
initial_get_result = recieve(s)
token_parser.feed(initial_get_result)
get_cookies_from_header(initial_get_result)

data = "username=" + USER_NAME + "&password=" + PASSWORD + \
    "&csrfmiddlewaretoken=" + CSRF_MIDDLEWARE_TOKEN + "&next=/fakebook/" + "\n\n"
header = (f"""
POST /accounts/login/ HTTP/1.1
Host: {HOST}
Origin: https://fakebook.3700.network
Referer: https://fakebook.3700.network/accounts/login/?next=/fakebook/
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Connection: keep-alive
Content-Type: application/x-www-form-urlencoded
Cookie: csrftoken={CSRF_COOKIE}
""")
contentLength = "Content-Length: " + str(len(data)) + "\n\n"
LOGIN_MSG = header + contentLength + data

s.sendall(LOGIN_MSG.encode())
login_response = recieve(s)

get_cookies_from_header(login_response)

redirected_page = "/fakebook/"


secret_flags = []
visited_pages = ["/accounts/logout/", "/"]
pages_to_visit = [redirected_page]

while len(secret_flags) < 5 and len(pages_to_visit) > 0:
	curr_page = pages_to_visit.pop(0)
	visited_pages.append(curr_page)
	#print(pages_to_visit)
	#print(curr_page)


	while(True):
		try:
			curr_page_html = get_page(s, curr_page)
			break
		except (RuntimeError, ValueError):
			s = open_socket()

	get_cookies_from_header(curr_page_html)

	
	soup = BeautifulSoup(curr_page_html, 'html.parser')

	#print(soup.prettify())
	#print(curr_page)

	for tag in soup.find_all("h2", "secret_flag"):
		#handel secret flag
		print(tag)
		flag_contents = tag.contents
		flag = flag_contents[5:]
		secret_flags.append(flag)

	for link in soup.find_all('a'):
		#check and maybe add 
		#print(link)
		href = link['href']

		if (href not in visited_pages) and (href not in pages_to_visit) and href.startswith("/"):
			#check if routing to fakebook
			pages_to_visit.append(href)



for flag in secret_flags:
	print(flag)


s.close()





# if it"s in visited pages skip to next loop
# else add to visited pages
# fetch html
# walk throug html
# if it"s a secret flag print it and add to secret flags
# if it"s a link add to pages to visit
# else don"t care keep ggoing

# socket.sendall(LOGIN_REQUEST.encode())
# print(socket.recv(65535).decode())
